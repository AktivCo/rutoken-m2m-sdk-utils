#!/bin/sh


include_rt_api(){

	script_path=$(realpath $0)
	script_dir="$(dirname $script_path)"
	rtapi_path="$script_dir/include/rt-api"

	source $rtapi_path
}

usage(){
	echo "Usage: rt-control <command> [command options]"
	echo ""
	echo "Commands:"
	echo "  -s, --select_devices [<device>...]"
	echo "    Configure and select the device to be accessible over PCSC (implicitly"
	echo "    starts pcscd). Requires root privileges."
	echo "    Values for <device>:"
	echo "      2010 - Rutoken 2010 SoC"
	echo "      4010 - Rutoken 4010 SoM"
	echo "      21xx - MicroSIM reader for Rutoken 2100/2151"
	echo -e "    ${Bold}All devices will be turned off if no device is specified${End}"
	echo ""
	echo "  -d, --disable_log"
	echo "    Disable pcscd logging (implicitly disables CCID and RTUART drivers log)."
	echo "    Requires root privileges."
	echo ""
	echo "  -l, --log_level [<driver_log_level>...]"
	echo "    Enable logging of pcscd and smartcard drivers. Requires root privileges."
	echo "    Log is written to /var/log/messages."
	echo "    Values for <driver_log_level>:"
	echo "      -c <level_ccid>"
	echo "        Set log level for CCID driver (default value is 3)."
	echo "        Value of <level_ccid> is a binary OR combination of the values:"
	echo "          1 - critical: important error messages"
	echo "          2 - info: informative messages"
	echo "          4 - comm: dump of communication with smartcard/reader"
	echo "          8 - periodic: periodic informative messages (every 0.1 sec)"
	echo "      -u <level_rtuart>"
	echo "        Set log level for RTUART driver (default value is 3)."
	echo "        Value of <level_rtuart> is a binary OR combination of the values:"
	echo "          1 - critical: important error messages"
	echo "          2 - error: all other error messages"
	echo "          4 - info: informative messages"
	echo "          8 - debug: periodic informative messages (every 0.1 sec)"
	echo ""
	echo "  -p, --pcscd  <start|stop|restart>"
	echo "    Start, stop or restart pcscd. Requires root privileges."
	echo ""
	echo "  -i, --info"
	echo ""
	echo "    Show the status of controlled entities."
	echo ""
	echo "  -h, --help"
	echo "    Show this message."
}

check_arg(){

	if [ -z $1 ]; then
		print_error "no argument supplied"
		usage
		exit 1
	fi
}

start_stop_pcscd(){

	exit_if_not_root

	check_arg $1

	case $1 in
		start)
			if start_pcscd; then
				print_succeed "pcscd started"
			else
				print_info "pcscd is already running; nothing is done"
			fi
		;;
		stop)
			if stop_pcscd; then
				print_succeed "pcscd stopped"
			else
				print_info "pcscd is not running; nothing is done"
			fi
		;;
		restart)
			stop_pcscd
			start_pcscd
			print_succeed "pcscd restarted"
		;;
		*)
			print_error "invalid option"
			exit 1
		;;
	esac
}

set_device(){

	exit_if_not_root

	soc="off"
	som="off"
	sim="off"

	while [ "$#" -gt 0 ]; do
		case $1 in
			2010)
				soc="on"
			;;
			4010)
				som="on"
			;;
			21xx)
				sim="on"
			;;
			*)
				print_error "invalid option: - $1"
				exit 1
			;;
		esac
		shift
	done

	if [ $som = "on" ] && [ $sim = "on" ]; then
		print_error "Rutoken 2100/2151 and Rutoken 4010 can't be selected at the same time"
		exit 1
	fi

	stop_pcscd
	enable_devices $soc $som $sim
	start_pcscd
	print_succeed "Rutoken 4010 SoM is $som; Rutoken 2010 is $soc; Rutoken 2100/2151 is $sim"

}

info(){

	if soc_is_active; then
		rutoken_soc="${Green} connected      ${End}"
	else
		rutoken_soc="${Red} not connected  ${End}"
	fi

	if som_is_active; then
		rutoken_som="${Green} connected      ${End}"
	else
		rutoken_som="${Red} not connected  ${End}"
	fi

	if sim_is_active; then
		rutoken_microsim="${Green} connected      ${End}"
	else
		rutoken_microsim="${Red} not connected  ${End}"
	fi

	if pcscd_is_running; then
		pcscd="${Green} running     ${End}"
	else
		pcscd="${Red} not running ${End}"
	fi

	timeout 1 pcsc_scan 1> /tmp/.pcsc_scan_info 2>/dev/null
	if grep -q "Aktiv Rutoken ECP" /tmp/.pcsc_scan_info; then
		rutoken_soc_pcsc="${Green} available     ${End}"
	else
		rutoken_soc_pcsc="${Red} not available ${End}"
	fi

	if grep -q "Rutoken ECP B" /tmp/.pcsc_scan_info; then
		rutoken_som_pcsc="${Green} available     ${End}"
	else
		rutoken_som_pcsc="${Red} not available ${End}"
	fi

	rm /tmp/.pcsc_scan_info

	rutoken_microsim_pcsc="${Red} not available ${End}"

	read_log_config

	if [ -z "$pcscd_flags" ]; then
		pcscd_logging="${Red} disabled ${End}"
		ccid_logging="${Red} disabled ${End}"
		ccid_log_level=0
		rtuart_logging="${Red} disabled ${End}"
		rtuart_log_level=0
	else
		pcscd_logging="${Green} enabled  ${End}"
		ccid_logging="${Green} enabled  ${End}"
		ccid_log_level=$(echo $ccid_env | cut -d "=" -f2)
		if [ $ccid_log_level -eq 0 ]; then
			ccid_logging="${Red} disabled ${End}"
		fi
		rtuart_logging="${Green} enabled  ${End}"
		rtuart_log_level=$(echo $rtuart_env | cut -d "=" -f2)
		if [ $rtuart_log_level -eq 0 ]; then
			rtuart_logging="${Red} disabled ${End}"
		fi
	fi

	if [ "$ccid_log_level" -lt "10" ]; then
		ccid_log_level="$ccid_log_level "
	fi

	if [ "$rtuart_log_level" -lt "10" ]; then
		rtuart_log_level="$rtuart_log_level "
	fi

	echo ""
	echo -e "${Purple}Devices physical state information${End}■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■"
	echo -e " Rutoken 2010      SoC      (usb)      $rutoken_soc to RPi2 ■"
	echo -e " Rutoken 4010      SOM      (uart)     $rutoken_som to RPi2 ■"
	echo -e " Rutoken 2151/2100 MicroSIM (sc)       $rutoken_microsim to RPi2 ■"
	echo "■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■"
	echo ""
	echo -e "${Purple}PCSCD${End}■■■■■■■■■"
	echo -e "$pcscd■"
	echo "■■■■■■■■■■■■■■"
	echo ""
	echo -e "${Purple}Devices availiability information${End}■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■"
	echo -e " Rutoken 2010      SoC      (usb)   is $rutoken_soc_pcsc over PC/SC driver ■"
	echo -e " Rutoken 4010      SOM      (uart)  is $rutoken_som_pcsc over PC/SC driver ■"
	echo -e " Rutoken 2151/2100 MicroSIM (sc)    is $rutoken_microsim_pcsc over PC/SC driver ■"
	echo "■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■"
	echo ""
	echo -e "${Purple}Logging information${End}■■■■■■■■■■■■■"
	echo -e " PCSCD   logging    $pcscd_logging ■"
	echo "■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■"
	echo -e " CCID    logging    $ccid_logging ■"
	echo -e "         log level   $ccid_log_level        ■"
	echo "■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■"
	echo -e " RTUART  logging    $rtuart_logging ■"
	echo -e "         log level   $rtuart_log_level        ■"
	echo "■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■"
	echo ""
}

check_numeric(){

	if ! echo $OPTARG | grep -Eq "^(0[xX][0-9a-fA-F]+|[0-9]+)$"; then
		print_error "Argument $OPTARG must be decimal or hexadecimal number for option -$opt!"
		exit 1
	fi
}

set_log_levels(){

	exit_if_not_root

	while getopts ":c:u:" opt; do
		case $opt in
			c)
				check_numeric
				ccid_lvl=$OPTARG
			;;
			u)
				check_numeric
				rtuart_lvl=$OPTARG
			;;
			:)
				print_error "Option -$OPTARG requires an argument!"
				exit 1
			;;
			\?)
				print_error "Invalid option: -$OPTARG!"
				exit 1
			;;
			*)
				print_succeed "Run pcscd with previous log settings"
			;;
		esac
	done

	read_log_config

	pcscd_flags="pcscd_flags=-ad"

	if [ -z "$ccid_lvl" ]; then
		ccid_lvl=3
	fi

	if [ -z "$rtuart_lvl" ]; then
		rtuart_lvl=3
	fi

	ccid_env="LIBCCID_ifdLogLevel=$ccid_lvl"
	rtuart_env="LIBRTUART_ifdLogLevel=$rtuart_lvl"

	echo $pcscd_flags > $log_config_path
	echo $ccid_env >> $log_config_path
	echo $rtuart_env >> $log_config_path

	stop_pcscd
	start_pcscd
	ccid_lvl=$(echo $ccid_env | cut -d "=" -f2)
	rtuart_lvl=$(echo $rtuart_env | cut -d "=" -f2)
	print_succeed "CCID log level: $ccid_lvl; RTUART log level: $rtuart_lvl"
}

disable_log(){

	if ! log_exists; then
		init_log
		print_succeed "the log hasn't been initialized before; nothing is done"
		return
	fi

	stop_pcscd
	echo " " > $log_config_path
	start_pcscd
	print_succeed "log disabled"
}

main(){

	if [ $# -eq 0 ]; then
		usage
		exit 1
	fi

	case $1 in
		-s | --select_devices)
			shift
			set_device $*
			exit 0
		;;
		-p | --pcscd)
			start_stop_pcscd $2
			exit 0
		;;
		-l | --log_level)
			shift
			set_log_levels $*
			exit 0
		;;
		-d | --disable_log)
			disable_log
			exit 0
		;;
		-i | --info)
			info
			exit 0
		;;
		-h | --help)
			usage
			exit 0
		;;
		*)
			usage
			exit 1
		;;
	esac
}

include_rt_api
main $*
