#!/bin/sh

. /opt/Rutoken/scripts/include/rt-api

usage(){
	echo "Usage: sudo ./rt-control <command> [command options]"
	echo "Commands:"
	echo "          -s, --select_device     <device>       configure and select the device to be seen by PC/SC driver (implicitly starts pcscd)"
	echo "          Devices:"
	echo "                      usb             select only Rutoken 2010 SoC to be seen by PC/SC driver"
	echo "                      uart            select only Rutoken 4010 SOM to be seen by PC/SC driver"
	echo "                      all             select both devices to be seen by PC/SC driver"
	echo " "
	echo "          -c, --change_interface  <interface>    change interfaces between MicroSIM and SOM embedded modules"
	echo "          Interfaces:"
	echo "                      uart           change interface to Rutoken 4010 SOM"
	echo "                      sc             change interface to Rutoken 2151/2100 MicroSIM"
	echo " "
	echo "          -d, --disable_log                     disable pcscd logging (implicitly disables CCID and Rutoken 4010 SOM uart drivers logs)"
	echo "          -l, --log_level         [flags]       change logging settings (call without additional flags will set log level for both drivers to 3 - default)"
	echo "          Flags:"
	echo "                      -c  <level>    set log level for CCID driver"
	echo "                      -u  <level>    set log level for Rutoken 4010 SOM uart driver"
	echo "                                     level is a binary OR combination of 4 different levels:"
	echo "                                                1: critical: important error messages"
	echo "                                                2: info:     informative messages like what reader was detected"
	echo "                                                4: comm:     a dump of all the bytes exchanged between the host and the reader"
	echo "                                                8: periodic: periodic info when pcscd test if a card is present (every 1/10 of a second)"
	echo " "
	echo "          -p, --pcscd  <start|stop|restart>      start, stop or restart pcscd"
	echo "          -i, --info                             see information about current working interfaces"
	echo "          -h, --help                             see this message"
}

check_arg(){

	if [ -z "$1" ]; then
		print_error "no argument supplied"
		usage
		exit 1
	fi
}

start_stop_pcscd(){

	check_arg $1

	case $1 in
		start)
			if start_pcscd; then
				print_succeed "pcscd started"
			else
				print_info "pcscd is already running; Nothing done"
			fi
		;;
		stop)
			if stop_pcscd; then
				print_succeed "pcscd stopped"
			else
				print_info "pcscd is not running; Nothing done"
			fi
		;;
		restart)
			stop_pcscd
			start_pcscd
			print_succeed "pcscd restarted"
		;;
		*)
			print_error "invalid option"
			exit 1
		;;
	esac
}

make_uart_available(){

	if ! is_interface_uart; then
		print_info "selected interface is Rutoken 2151/2100 MicroSIM; changing interface to Rutoken 4010 SOM"
		change_interface uart
	fi
}

set_device(){

	check_arg $1

	select_device $1

	case $1 in
		usb)
			print_succeed "Rutoken 2010 SoC device selected"
		;;
		uart)
			make_uart_available
			print_succeed "Rutoken 4010 SOM device selected"
		;;
		all)
			make_uart_available
			print_succeed "all Rutoken devices are selected"
		;;
	esac
}

change_interface(){

	check_arg $1
	pcscd_was_running=false

	if is_pcscd_running; then
		stop_pcscd
		pcscd_was_running=true
	fi

	case $1 in
		uart)
			set_interface_uart
			print_succeed "interface changed to Rutoken 4010 SOM"
		;;
		sc)
			set_interface_sc
			print_succeed "interface changed to Rutoken 2151/2100 MicroSIM"
		;;
		*)
			print_error "invalid option"
			exit 1

		;;
	esac

	if $pcscd_was_running; then
		start_pcscd
	fi
}


info(){

	if lsusb | grep -q "0a89:0030"; then
		rutoken_soc="${Green} connected     ${End}"
	else
		rutoken_soc="${Red} not connected ${End}"
	fi

	if is_interface_uart; then
		rutoken_som="${Green} connected     ${End}"
		rutoken_microsim="${Red} not connected ${End}"
	else
		rutoken_som="${Red} not connected ${End} "
		rutoken_microsim="${Green} connected     ${End} "
	fi

	if is_pcscd_running; then
		pcscd="${Green} running     ${End}"
	else
		pcscd="${Red} not running ${End}"
	fi

	timeout 1 pcsc_scan 1> /tmp/.pcsc_scan_info 2>/dev/null
	if grep -q "Aktiv Rutoken ECP" /tmp/.pcsc_scan_info; then
		rutoken_soc_pcsc="${Green} available     ${End}"
	else
		rutoken_soc_pcsc="${Red} not available ${End}"
	fi

	if grep -q "Rutoken ECP B" /tmp/.pcsc_scan_info; then
		rutoken_som_pcsc="${Green} available     ${End}"
	else
		rutoken_som_pcsc="${Red} not available ${End}"
	fi

	rm /tmp/.pcsc_scan_info

	rutoken_microsim_pcsc="${Red} not available ${End}"

	read_log_config

	if [ -z "$pcscd_flags" ]; then
		pcscd_logging="${Red} disabled ${End}"
		ccid_logging="${Red} disabled ${End}"
		ccid_log_level=0
		rtuart_logging="${Red} disabled ${End}"
		rtuart_log_level=0
	else
		pcscd_logging="${Green} enabled ${End}"
		ccid_logging="${Green} enabled ${End}"
		ccid_log_level=$(echo $ccid_env | cut -d "=" -f2)
		if [ $ccid_log_level -eq 0 ]; then
			ccid_logging="${Red} disabled ${End}"
		fi
		rtuart_logging="${Green} enabled ${End}"
		rtuart_log_level=$(echo $rtuart_env | cut -d "=" -f2)
		if [ $rtuart_log_level -eq 0 ]; then
			rtuart_logging="${Red} disabled ${End}"
		fi

	fi

	echo " "
	echo -e "Devices physical state information:"
	echo -e "Rutoken 2010      SoC      $rutoken_soc to RPi2"
	echo -e "Rutoken 4010      SOM      $rutoken_som to RPi2"
	echo -e "Rutoken 2151/2100 MicroSIM $rutoken_microsim to RPi2"
	echo " "
	echo -e "pcscd                        is $pcscd"
	echo " "
	echo -e "Devices availiability information:"
	echo -e "Rutoken 2010      SoC        is $rutoken_soc_pcsc over PC/SC driver"
	echo -e "Rutoken 4010      SOM        is $rutoken_som_pcsc over PC/SC driver"
	echo -e "Rutoken 2151/2100 MicroSIM   is $rutoken_microsim_pcsc over PC/SC driver"
	echo " "
	echo -e "Logging information:"
	echo -e "pcscd"
	echo -e "        logging    $pcscd_logging"
	echo -e "ccid"
	echo -e "        logging    $ccid_logging"
	echo -e "        log level   $ccid_log_level"
	echo -e "rtuart"
	echo -e "        logging    $rtuart_logging"
	echo -e "        log level   $rtuart_log_level"
}

check_numeric(){

	if ! echo $OPTARG | grep -Eq "^(0[xX][0-9a-fA-F]+|[0-9]+)$"; then
		print_error "Argument $OPTARG must be decimal or hexadecimal number for option -$opt!"
		exit 1
	fi
}

set_log_levels(){

	exit_if_not_root

	while getopts ":c:u:" opt; do
		case $opt in
			c)
				check_numeric
				ccid_lvl=$OPTARG
			;;
			u)
				check_numeric
				rtuart_lvl=$OPTARG
			;;
			:)
				print_error "Option -$OPTARG requires an argument!"
				exit 1
			;;
			\?)
				print_error "Invalid option: -$OPTARG!"
				exit 1
			;;
			*)
				print_succeed "Run pcscd with previous log settings"
			;;
		esac
	done

	read_log_config

	pcscd_flags="pcscd_flags=-ad"

	if [ -z "$ccid_lvl" ]; then
		ccid_lvl=3
	fi

	if [ -z "$rtuart_lvl" ]; then
		rtuart_lvl=3
	fi

	ccid_env="LIBCCID_ifdLogLevel=$ccid_lvl"
	rtuart_env="LIBRTUART_ifdLogLevel=$rtuart_lvl"

	echo $pcscd_flags > $log_config_path
	echo $ccid_env >> $log_config_path
	echo $rtuart_env >> $log_config_path

	stop_pcscd
	start_pcscd
	ccid_lvl=$(echo $ccid_env | cut -d "=" -f2)
	rtuart_lvl=$(echo $rtuart_env | cut -d "=" -f2)
	print_succeed "ccid log level: $ccid_lvl; rtuart log level: $rtuart_lvl"
}

disable_log(){

	exit_if_not_root
	init_log
	echo " " > $log_config_path
	print_succeed "log disabled"
}

main(){

	if [ $# -eq 0 ]; then
		usage
		exit 1
	fi

	case $1 in
		-s | --select_device)
			set_device $2
			exit 0
		;;
		-c | --change_interface)
			change_interface $2
			exit 0
		;;
		-p | --pcscd)
			start_stop_pcscd $2
			exit 0
		;;
		-l | --log_level)
			shift
			set_log_levels $*
			exit 0
		;;
		-d | --disable_log)
			disable_log
			exit 0
		;;
		-i | --info)
			info
			exit 0
		;;
		-h | --help)
			usage
			exit 0
		;;
		*)
			usage
			exit 1
		;;
	esac
}

main $*
