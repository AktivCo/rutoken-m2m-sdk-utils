#!/bin/sh

include_rt_api(){
	
	script_path=$(realpath $0)
	script_dir="$(dirname $script_path)"
	rtapi_path="$script_dir/include/rt-api"

	source $rtapi_path
}

usage(){
	echo "Usage: rt-run-sample [option...] -p <path>"
	echo ""
	echo "Run executable in preset environment. If logging is selected, logs are written" 
	echo "to ~/log directory. Requires root privileges."
	echo ""
	echo "Options:"
	echo "  -h - show this message"
	echo "  -s - enable pcsc-spy logging for executable."
	echo "  -l - write executable output to log file"
	echo "  -d <device> - narrow reader list returned by PCSC."
	echo "    Values for <device>:"
	echo "      2010 - Rutoken 2010 SoC only"
	echo "      4010 - Rutoken 4010 SoM only"
	echo "      21xx - MicroSIM reader only"
	echo "      2010+4010 - both Rutoken 2010 SoC and Rutoken 4010 SoM"
	echo "      2010+21xx -  both Rutoken 2010 SoC and MicroSIM reader"
	echo "  -p <path> - path to the executable to run"
}

check_sample(){

	if [ ! -f $1 ]; then
		print_error "no such file: $1"
		exit 1
	fi
}

check_device(){

	if ! echo $1| grep -Eq '^(4010|2010|21xx|2010\+4010|2010\+21xx)$'; then
		print_error "Device $1 doesn't exist"
		exit 1
	fi
}

select_device(){

	stop_pcscd
	case $1 in
		2010) enable_devices "on"  "off" "off";;
		4010) enable_devices "off" "on"  "off";;
		21xx) enable_devices "off" "off" "on";;
		2010+4010)
			print_info "Attention! Multiple devices are active; be sure executable to run supports multiple readers"
			sleep 3 #give the user time to read
			enable_devices "on"  "on"  "off";;
		2010+21xx)
			print_info "Attention! Multiple devices are active; be sure executable to run supports multiple readers"
			sleep 3 #give the user time to read
			enable_devices "on"  "off" "on";;
	esac
	start_pcscd
}

run_sample(){

	spy=$1
	log=$2
	device=$3
	sample=$(realpath $4)
	sample_name=$(basename $sample)

	user=$(echo $SUDO_USER)
	if [ -z $user ]; then
		user=$(who am i | cut -d ' ' -f 1)
	fi

	home=$(sudo -u $user sh -c "cd ~$user && pwd")

	pcsc_spy_fifo="$home/pcsc-spy"


	if [ -p $pcsc_spy_fifo ]; then
		rm $pcsc_spy_fifo
	fi

	memorize_devices

	if [ "$device" = "none" ] && [ $device_count -gt 1 ]; then
		print_info "Attention! Multiple devices are active; be sure executable to run supports multiple readers"
		sleep 3 #give the user time to read
	fi

	if [ "$device" = "none" ] && [ $device_count -eq 0 ]; then
		print_error "none of the devices enabled; specify at least one device"
		exit 1
	fi

	select_device $device

	if $spy || $log; then
		log_dir="$home/log/$sample_name"
		sudo -u $user -H sh -c "mkdir -p $log_dir"
	fi

	preload=""
	if $spy; then
		preload="LD_PRELOAD=/usr/lib/libpcscspy.so"
		sudo -u $user -H sh -c "mkfifo $pcsc_spy_fifo"
		pcsc_spy_raw_out="$log_dir/.pcsc-spy.raw"
		sudo -u $user -H sh -c "cat $pcsc_spy_fifo > $pcsc_spy_raw_out &"
		cat_pid=$!
		pcsc_spy_out="$log_dir/$sample_name-pcsc-spy.log"
	fi

	if $log; then
		print_info "$sample_name work in progress, please wait"
		sample_out="$log_dir/$sample_name.log"
		sudo -u $user -H sh -c "$preload $sample > $sample_out"
		print_succeed "$sample_name done!"
	else
		sudo -u $user -H sh -c "$preload $sample"
		print_succeed "$sample_name done!"
	fi

	if $spy; then
		print_info "pcsc-spy work in progress, please wait"
		sudo -u $user -H sh -c "/usr/bin/pcsc-spy -n $pcsc_spy_raw_out > $pcsc_spy_out"
		print_succeed "pcsc-spy done!"
		if ps -C -p $cat_pid 1>/dev/null; then
			kill $cat_pid
		fi

		rm $pcsc_spy_fifo $pcsc_spy_raw_out

	fi

	restore_devices
}

main(){

	if [ $# -lt 1 ]; then
		usage
		exit 1
	fi

	spy_option=false
	log_option=false
	device="none"
	path=''

	while getopts "hsld:p:" opt; do
		case $opt in
			h)	usage
				exit 0
			;;
			s)	spy_option=true
			;;
			l)	log_option=true
			;;
			d)	device=$OPTARG
				check_device "$device"
			;;
			p)	path=$OPTARG
				check_sample "$path"
			;;
			*)	usage
				exit 1
			;;
		esac
	done

	exit_if_not_root

	if [ ! -z $path ]; then
		run_sample $spy_option $log_option $device $path
	else
		print_error "no path supplied"
		usage
		exit 1
	fi
}

include_rt_api
main $*
