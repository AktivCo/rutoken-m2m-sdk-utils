#!/bin/sh


#this script used as a library in other rt-utils

Bold='\e[1m'
Red='\e[31m'
Green='\e[32m'
Yellow='\e[93m'
Purple='\e[35m'

End='\e[0m'


print_error(){
	echo ""
	echo -e "${Red}Error${End}: ${Bold}$1${End}"
}

print_succeed(){
	echo ""
	echo -e "${Green}Success${End}: ${Bold}$1${End}"
}

print_info(){
	echo ""
	echo -e "${Yellow}Info${End}: ${Bold}$1${End}"
}

exit_if_not_root(){

	user_id=$(id -u)
	if [ "$user_id" -ne 0 ]; then
		print_error "run as root"
		exit 1
	fi
}

pcscd_is_running(){

	if [ ! -f /var/run/pcscd/pcscd.pid ]; then
		false
		return
	fi

	pcscd_pid=$(cat /var/run/pcscd/pcscd.pid | tr -d '\0')

	if [ ! -d "/proc/$pcscd_pid" ]; then
		false
		return
	fi

	true
	return
}

stop_pcscd(){

	exit_if_not_root

	if ! pcscd_is_running; then
		false
		return
	fi

	kill $pcscd_pid
	timeout 5 sh -c 'while true; do start-stop-daemon -T -p /var/run/pcscd/pcscd.pid; if [ $? -eq 3 ]; then exit 3; fi; done'
	if [ $? -ne 3 ]; then
		print_error "can't kill pcscd"
		exit 1
	fi

	true
	return
}

log_exists(){

	log_config_path="/tmp/rt-log.config"

	if [ ! -f $log_config_path ]; then
		false
	else
		true
	fi
	return
}

init_log(){

	if ! log_exists; then
		touch $log_config_path
	fi
}

read_log_config(){

	init_log

	pcscd_flags=$(cat $log_config_path | grep pcscd_flags | cut -d '=' -f2)

	ccid_env=$(cat $log_config_path | grep LIBCCID_ifdLogLevel)

	rtuart_env=$(cat $log_config_path | grep LIBRTUART_ifdLogLevel)

	rtuartscreader_env=$(cat $log_config_path | grep LIBRTUARTSCREADER_ifdLogLevel)
}

start_pcscd(){

	exit_if_not_root

	if pcscd_is_running; then
		false
		return
	fi

	read_log_config
	env_variables="$ccid_env $rtuart_env $rtuartscreader_env"
	sh -c "$env_variables start-stop-daemon -SbC -p /var/run/pcscd/pcscd.pid -x /usr/sbin/pcscd -- $pcscd_flags 1>/dev/null 2>/dev/null"
	timeout 5 sh -c 'while true; do start-stop-daemon -T -p /var/run/pcscd/pcscd.pid; if [ $? -eq 0 ]; then exit 0; fi; done'
	if [ $? -ne 0 ] ; then
		print_error "can't start pcscd"
		exit 1
	fi

	true
	return
}

soc_connected(){

	if  lsusb | grep -q "0a89:0030"; then
		true
	else
		false
	fi
	return
}

gpio_pin_is_low(){

	case $1 in
		soc)
			bcm=26
		;;
		som)
			bcm=23
		;;
		sim)
			bcm=27
		;;
		switch)
			bcm=22
		;;
	esac

	if [ ! -d /sys/class/gpio/gpio$bcm ]; then
		true
		return
	fi

	if grep -q 'in' /sys/class/gpio/gpio$bcm/direction; then
		true
		return
	fi

	gpio_value=$(cat /sys/class/gpio/gpio$bcm/value)

	gpio_active_low=$(cat /sys/class/gpio/gpio$bcm/active_low)

	if [ $gpio_value -eq $gpio_active_low ]; then
		true
	else
		false
	fi

	return
}

reset_gpio(){

	exit_if_not_root

	if [ -d "/sys/class/gpio/gpio$1" ]; then
		echo $1 > /sys/class/gpio/unexport
	fi

	echo $1 > /sys/class/gpio/export
}

setup_gpio(){

	exit_if_not_root

	reset_gpio $1

	echo $2 > "/sys/class/gpio/gpio$1/direction"
	if [ ! -z $3 ]; then
		echo $3 > "/sys/class/gpio/gpio$1/value"
	fi
}

set_gpio_state(){

	exit_if_not_root

	case $1 in
		soc)
			bcm=26
		;;
		som)
			bcm=23
		;;
		sim)
			bcm=27
		;;
		switch)
			bcm=22
		;;
	esac

	power=0
	if [ $2 = "high" ]; then
		power=1
	fi

	setup_gpio $bcm 'out' $power
}

set_switch_on_sim(){
	set_gpio_state "switch" "high"
}


set_switch_on_som(){
	set_gpio_state "switch" "low"
}

switch_is_on_som(){

	if gpio_pin_is_low "switch"; then
		true
	else
		false
	fi
	return
}

hide_librtuart(){

	exit_if_not_root

	if [ -f /etc/reader.conf.d/librtuart ]; then
		mv /etc/reader.conf.d/librtuart /etc/reader.conf.d/.librtuart
	fi
}

make_librtuart_visible(){

	exit_if_not_root

	if [ -f /etc/reader.conf.d/.librtuart ]; then
		mv /etc/reader.conf.d/.librtuart /etc/reader.conf.d/librtuart
	fi
}

librtuart_is_visible(){

	if [ -f /etc/reader.conf.d/librtuart ]; then
		true
	else
		false
	fi
	return
}

hide_librtuartscreader(){

	exit_if_not_root

	if [ -f /etc/reader.conf.d/librtuartscreader ]; then
		mv /etc/reader.conf.d/librtuartscreader /etc/reader.conf.d/.librtuartscreader
	fi
}

make_librtuartscreader_visible(){

	exit_if_not_root

	if [ -f /etc/reader.conf.d/.librtuartscreader ]; then
		mv /etc/reader.conf.d/.librtuartscreader /etc/reader.conf.d/librtuartscreader
	fi
}

librtuartscreader_is_visible(){

	if [ -f /etc/reader.conf.d/librtuartscreader ]; then
		true
	else
		false
	fi
	return
}

som_is_active(){

	if ! switch_is_on_som; then
		false
		return
	fi

	if ! gpio_pin_is_low "som"; then
		false
		return
	fi

	if ! librtuart_is_visible; then
		false
		return
	fi

	true
	return
}

sim_is_active(){

	if switch_is_on_som; then
		false
		return
	fi

	if ! gpio_pin_is_low "sim"; then
		false
		return
	fi

	if ! librtuartscreader_is_visible; then
		false
		return
	fi

	true
	return
}

soc_is_active(){

	if ! soc_connected; then
		false
		return
	fi

	if gpio_pin_is_low "soc"; then
		false
		return
	fi

	true
	return
}

enable_soc(){

	exit_if_not_root

	set_gpio_state "soc"  "high"
	timeout 5 sh -c 'while true; do  if lsusb | grep -q "0a89:0030"; then exit 0; fi; done'
	if [ $? -ne 0 ] ; then
		print_error "unable to power on Rutoken 2010; Rutoken 2010 is not connected by usb"
		print_info "If you insist Rutoken 2010 is connected with USB cable, please perform hardware reset (including physical power off) of the demoboard"
		exit 1
	fi
}

disable_soc(){
	if soc_connected; then
		set_gpio_state "soc"  "low"
	fi
}

enable_som(){
	make_librtuart_visible
	set_switch_on_som
	set_gpio_state "som" "low"
}

disable_som(){
	hide_librtuart
	set_switch_on_sim
	set_gpio_state "som" "high"
}

enable_sim(){
	make_librtuartscreader_visible
	set_switch_on_sim
	set_gpio_state "sim" "low"
}

disable_sim(){
	hide_librtuartscreader
	set_switch_on_som
	set_gpio_state "sim" "high"
}

enable_devices(){

	exit_if_not_root

	soc=$1
	som=$2
	sim=$3

	if [ $soc = "off" ]; then
		disable_soc
	else
		enable_soc
	fi

	if [ $som = "off" ]; then
		disable_som
	else
		enable_som
	fi

	if [ $sim = "off" ]; then
		disable_sim
	else
		enable_sim
	fi
}

memorize_devices(){

	soc_status="off"
	som_status="off"
	sim_status="off"
	device_count=0

	if soc_is_active; then
		soc_status="on"
		device_count=$((device_count+1))
	fi

	if som_is_active; then
		som_status="on"
		device_count=$((device_count+1))
	fi

	if sim_is_active; then
		sim_status="on"
		device_count=$((device_count+1))
	fi
}

restore_devices(){

	stop_pcscd
	enable_devices $soc_status $som_status $sim_status
	start_pcscd
}
