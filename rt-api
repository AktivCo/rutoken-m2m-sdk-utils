#!/bin/sh


#this script used as a library in other rt-utils

Bold='\e[1m'
Red='\e[31m'
Green='\e[32m'
Yellow='\e[93m'
End='\e[0m'
Purple='\e[35m'

print_error(){
	echo " "
	echo -e "${Red}Error${End}: ${Bold}$1${End}"
}

print_succeed(){
	echo " "
	echo -e "${Green}Success${End}: ${Bold}$1${End}"
}

print_info(){
	echo " "
	echo -e "${Yellow}Info${End}: ${Bold}$1${End}"
}

exit_if_not_root(){

	user_id=$(id -u)
	if [ "$user_id" -ne 0 ]; then
		print_error "run as root"
		exit 1
	fi
}

is_pcscd_running(){

	if [ -f /var/run/pcscd/pcscd.pid ]; then
		pcscd_pid=$(cat /var/run/pcscd/pcscd.pid | tr -d '\0')
		if [ -d "/proc/$pcscd_pid" ]; then
			true
        else
			false
        fi
	else
		false
	fi

	return
}

stop_pcscd(){

	exit_if_not_root

	if is_pcscd_running; then
		kill $pcscd_pid
		timeout 5 sh -c 'while true; do start-stop-daemon -T -p /var/run/pcscd/pcscd.pid; if [ $? -eq 3 ]; then exit 3; fi; done'
		if [ $? -ne 3 ]; then
			print_error "can't kill pcscd"
			exit 1
		fi
		true
	else
		false
	fi

	return
}

init_log(){

	log_config_path="/tmp/rtm_log.config"

	if [ ! -f $log_config_path ]; then
		touch $log_config_path
	fi

	pcscd_flags=''
	ccid_env=''
	rtuart_env=''
}

read_log_config(){

	init_log

	pcscd_flags=$(cat $log_config_path | grep pcscd_flags | cut -d '=' -f2)

	ccid_env=$(cat $log_config_path | grep LIBCCID_ifdLogLevel)

	rtuart_env=$(cat $log_config_path | grep LIBRTUART_ifdLogLevel)
}

start_pcscd(){

	exit_if_not_root

	if is_pcscd_running; then
		false
	else
		read_log_config

		env_variables="$ccid_env $rtuart_env"
		sh -c "$env_variables start-stop-daemon -SbC -p /var/run/pcscd/pcscd.pid -x /usr/sbin/pcscd -- $pcscd_flags 1>/dev/null 2>/dev/null"
		timeout 5 sh -c 'while true; do start-stop-daemon -T -p /var/run/pcscd/pcscd.pid; if [ $? -eq 0 ]; then exit 0; fi; done'
		if [ $? -ne 0 ] ; then
			print_error "can't start pcscd"
			exit 1
		fi
		true
	fi

	return
}


check_device(){

	if ! echo $1 | grep -Eq '^(uart|usb|all)'; then
		print_error "no such device: $1"
		exit 1
	fi
}

is_usb_connected(){

	if  lsusb | grep -q "0a89:0030"; then
		true
	else
		false
	fi
	return
}

#unbinding usb device is unsafe due to complete device removal from system device tree after reboot if it was unbind previously
unplug_usb_unsafe(){

	exit_if_not_root

	timeout 1 pcsc_scan 1>/tmp/.pcsc_scan.out 2>/dev/null
	found=$(grep "Aktiv Rutoken ECP" /tmp/.pcsc_scan.out)
	rm /tmp/.pcsc_scan.out
	if [ ! -z "$found" ]; then
		sh -c "echo '1-1.2' > /sys/bus/usb/drivers/usb/unbind"
	fi
}

plug_usb_unsafe(){

	exit_if_not_root

	timeout 1 pcsc_scan 1>/tmp/.pcsc_scan.out 2>/dev/null
	found=$(grep "Aktiv Rutoken ECP" /tmp/.pcsc_scan.out)
	rm /tmp/.pcsc_scan.out
	if [ -z "$found" ]; then
		sh -c "echo '1-1.2' > /sys/bus/usb/drivers/usb/bind"
	fi
}

unplug_uart(){

	if [ -f /etc/reader.conf.d/librtuart ]; then
		mv /etc/reader.conf.d/librtuart /etc/reader.conf.d/.librtuart 2>/dev/null
	fi
}

plug_uart(){

	if [ ! -f /etc/reader.conf.d/librtuart ]; then
		mv /etc/reader.conf.d/.librtuart /etc/reader.conf.d/librtuart 2>/dev/null
	fi
}

unplug_usb(){

	exit_if_not_root

	if ! is_usb_connected; then
		print_error "can't unplug; usb device physically unplugged"
		exit 1
	fi

	if [ -d /usr/lib/pcsc/drivers/ifd-ccid.bundle ]; then
		mv /usr/lib/pcsc/drivers/ifd-ccid.bundle /usr/lib/pcsc/drivers/.ifd-ccid.bundle
	fi
}

plug_usb(){

	exit_if_not_root

	if ! is_usb_connected; then
		print_error "can't plug; usb device physically unplugged"
		exit 1
	fi

	if [ ! -d /usr/lib/pcsc/drivers/ifd-ccid.bundle ]; then
		mv /usr/lib/pcsc/drivers/.ifd-ccid.bundle /usr/lib/pcsc/drivers/ifd-ccid.bundle
	fi
}

select_device(){

	check_device $1
	
	stop_pcscd
	case $1 in
			usb)
				plug_usb
				unplug_uart
			;;
			uart)
				plug_uart
				unplug_usb
			;;
			all)
				plug_usb
				plug_uart
			;;
	esac
	start_pcscd
}

restore_devices(){

	check_device $1
	
	case $1 in
		usb)  plug_uart ;;
		uart) plug_usb  ;;
	esac
}

is_interface_uart(){

	if [ ! -d /sys/class/gpio/gpio22 ]; then
		true
		return
	fi

	if grep -q 'in' /sys/class/gpio/gpio22/direction; then
		true
		return
	fi

	gpio22_value=$(cat /sys/class/gpio/gpio22/value)

	gpio22_active_low=$(cat /sys/class/gpio/gpio22/active_low)

	if [ $gpio22_value -eq $gpio22_active_low ]; then
		true
	else
		false
	fi

	return
}

clear_gpio22(){

	if [ -d /sys/class/gpio/gpio22 ]; then
		echo '22' > /sys/class/gpio/unexport
	fi
}

set_interface_sc(){

	exit_if_not_root

	clear_gpio22

	echo '22' > /sys/class/gpio/export
	echo 'out' > /sys/class/gpio/gpio22/direction
	echo '1' > /sys/class/gpio/gpio22/active_low
	echo '0' > /sys/class/gpio/gpio22/value
}

set_interface_uart(){

	exit_if_not_root

	clear_gpio22

	echo '22' > /sys/class/gpio/export
	echo 'out' > /sys/class/gpio/gpio22/direction
	echo '1' > /sys/class/gpio/gpio22/active_low
	echo '1' > /sys/class/gpio/gpio22/value
}
